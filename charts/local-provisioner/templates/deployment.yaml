apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "local-provisioner.fullname" . }}
  labels:
{{ include "local-provisioner.labels.standard" . | indent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "local-provisioner.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
{{ include "local-provisioner.labels.standard" . | indent 8 }}
    spec:
      serviceAccountName: {{ .Values.daemonset.serviceAccount }}
{{- if .Values.daemonset.nodeSelector }}
      nodeSelector:
{{ .Values.daemonset.nodeSelector | toYaml | trim | indent 8 }}
{{- end }}
      containers:
        - image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          name: provisioner
          securityContext:
            privileged: true
{{- if .Values.daemonset.resources }}
          resources:
{{ .Values.daemonset.resources | toYaml | trim | indent 12 }}
{{- end }}
          env:
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          volumeMounts:
            - mountPath: /etc/provisioner/config
              name: provisioner-config
              readOnly: true
            {{- range $classConfig := .Values.classes }}
            - mountPath: {{ if $classConfig.mountDir }} {{- $classConfig.mountDir -}} {{ else }} {{- $classConfig.hostDir -}} {{ end }}
              name: {{ $classConfig.name }}
              mountPropagation: "HostToContainer"
            {{- end }}
      volumes:
        - name: provisioner-config
          configMap:
            name: {{ template "local-provisioner.fullname" . }}-config
        - name: provisioner-dev
          hostPath:
            path: /dev
        {{- range $classConfig := .Values.classes }}
        - name: {{ $classConfig.name }}
          hostPath:
            path: {{ $classConfig.hostDir }}
        {{- end }}
